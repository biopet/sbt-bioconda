package nl.biopet.bioconda

import org.yaml.snakeyaml.Yaml
import java.io.{File, PrintWriter}

import scala.collection.JavaConverters._
import scala.io.Source

class BiocondaRecipe(name: String,
                     version: String,
                     sourceUrl: String,
                     sourceSha256: String,
                     runRequirements: Seq[String],
                     buildRequirements: Seq[String],
                     testCommands: Seq[String],
                     homeUrl: String,
                     license: String,
                     summary: String,
                     defaultJavaOptions: Seq[String],
                     buildNumber: Int = 0,
                     notes: Option[String] = None) {

  def fileName: String = sourceUrl.split("/").last
  def wrapperFilename: String = s"$name.py"

  def stringToFile(string: String, file: File): Unit = {
    val writer = new PrintWriter(file)
    writer.write(string)
    writer.close()
  }

  def createRecipeFiles(dir: File): Unit = {
    dir.mkdirs()
    val buildSh = new File(dir, "build.sh")
    val meta = new File(dir, "meta.yaml")
    val wrapper = new File(dir, wrapperFilename)
    stringToFile(metaYaml, meta)
    stringToFile(buildScript, buildSh)
    stringToFile(wrapperScript, wrapper)
  }

  def createRecipe(dir: File): Unit = {
    dir.mkdirs()
    createRecipeFiles(dir)
    //Also create a subdirectory with the version
    createRecipeFiles(new File(dir, version))
  }

  def metaYaml: String = {
    val yaml = new Yaml()
    val meta: java.util.Map[String, Object] = {
      mapAsJavaMap(
        Map(
          "package" -> Map(
            "name" -> name,
            "version" -> version
          ).asJava,
          "source" -> Map(
            "url" -> sourceUrl,
            "sha256" -> sourceSha256
          ).asJava,
          "build" -> Map(
            "number" -> buildNumber
          ).asJava,
          "requirements" -> Map(
            "run" -> seqAsJavaList[String](runRequirements),
            "build" -> seqAsJavaList[String](buildRequirements)
          ).asJava,
          "about" -> Map(
            "home" -> homeUrl,
            "license" -> license,
            "summary" -> summary
          ).asJava,
          "test" -> Map(
            "commands" -> seqAsJavaList[String](testCommands)
          ).asJava,
          "extra" -> Map(
            "notes" -> notes.getOrElse("")
          ).asJava
        )
      )
    }

    s"""# Based on OpenJDK recipe in conda-forge
       |# https://github.com/conda-forge/openjdk-feedstock/blob/master/recipe/meta.yaml
       |# This file was automatically generated by the sbt-bioconda plugin.
       |
     """.stripMargin + "\n" + yaml.dumpAsMap(meta)
  }

  def buildScript: String =
    s"""#!/usr/bin/env bash
       |# Build file is copied from VarScan
       |# https://github.com/bioconda/bioconda-recipes/blob/master/recipes/varscan/build.sh
       |# This file was automatically generated by the sbt-bioconda plugin.
       |
       |outdir=$$PREFIX/share/$$PKG_NAME-$$PKG_VERSION-$$PKG_BUILDNUM
       |mkdir -p $$outdir
       |mkdir -p $$PREFIX/bin
       |cp $fileName $$outdir/$fileName
       |cp $$RECIPE_DIR/${wrapperFilename} $$outdir/$name
     """.stripMargin

  def wrapperScript: String = {
    def pyScript: String = {
      val source = getClass().getClassLoader().getResourceAsStream("nl/biopet/bioconda/wrapper.py")
      Source.fromInputStream(source).mkString
    }

    val javaOpts = new StringBuilder
    javaOpts.append("[")
    defaultJavaOptions.foreach(x => javaOpts.append("'" + x + "',"))
    javaOpts.append("]")
    s"""
         |#!/usr/bin/env python
         |#
         |# Wrapper script for starting the $name JAR package
         |#
         |# This script is written for use with the Conda package manager and is copied
         |# from the peptide-shaker wrapper. Only the parameters are changed.
         |# (https://github.com/bioconda/bioconda-recipes/blob/master/recipes/peptide-shaker/peptide-shaker.py)
         |#
         |# This file was automatically generated by the sbt-bioconda plugin.
         |
         |import os
         |import subprocess
         |import sys
         |import shutil
         |
         |from os import access
         |from os import getenv
         |from os import X_OK
         |
         |jar_file = '$fileName'
         |
         |default_jvm_mem_opts = $javaOpts
         |
         |# !!! End of parameter section. No user-serviceable code below this line !!!
         |
       """.stripMargin + "\n" + pyScript
  }

}
